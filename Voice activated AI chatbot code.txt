"""
Voice-Activated AI Chatbot
--------------------------
Features:
- speech-to-text via speech_recognition
- text-to-speech via pyttsx3
- Wikipedia summaries via wikipedia-api
- open websites via webbrowser
- basic system commands (shutdown/restart/lock) - commented and platform-aware
- fallback to text input if microphone not available
- add simple custom commands: note-taking and reading notes
"""

import speech_recognition as sr
import pyttsx3
import wikipedia
import webbrowser
import datetime, os, subprocess, sys
from pathlib import Path

NOTES_FILE = Path("notes.txt")

# Initialize TTS engine
engine = pyttsx3.init()
engine.setProperty('rate', 170)

def speak(text):
    """Speak the given text and also print it to console."""
    print("Assistant:", text)
    engine.say(text)
    engine.runAndWait()

def wishMe():
    hour = datetime.datetime.now().hour
    if 5 <= hour < 12:
        speak("Good morning!")
    elif 12 <= hour < 17:
        speak("Good afternoon!")
    elif 17 <= hour < 21:
        speak("Good evening!")
    else:
        speak("Hello!")
    speak("I am your voice assistant. How can I help you today?")

def takeCommand(timeout=5, phrase_time_limit=8):
    """Listen from microphone and return recognized text.
       Falls back to text input if recognition fails.
    """
    r = sr.Recognizer()
    r.pause_threshold = 0.6
    try:
        with sr.Microphone() as source:
            print("Listening...")
            audio = r.listen(source, timeout=timeout, phrase_time_limit=phrase_time_limit)
        print("Recognizing...")
        query = r.recognize_google(audio, language='en-in')
        print(f"You said: {query}")
        return query.lower()
    except Exception:
        speak("I couldn't understand. Please type your command.")
        return input("Type your command: ").lower()

def search_wikipedia(query, sentences=2):
    wiki = wikipedia.Wikipedia('en')
    page = wiki.page(query)
    if page.exists():
        summary = page.summary.split('\n')[0:sentences]
        speak("According to Wikipedia, " + " ".join(summary))
    else:
        speak("I couldn't find a Wikipedia page for that topic.")

def open_website(domain):
    if not domain.startswith("http"):
        url = "https://" + domain
    else:
        url = domain
    speak(f"Opening {url}")
    webbrowser.open(url)

def write_note(text):
    with open(NOTES_FILE, "a", encoding='utf-8') as f:
        f.write(f"{datetime.datetime.now().isoformat()} - {text}\n")
    speak("Note saved.")

def read_notes():
    if NOTES_FILE.exists():
        content = NOTES_FILE.read_text(encoding='utf-8')
        if content.strip():
            speak("Here are your notes:")
            print(content)
            speak(content[:1000])  # limit spoken length
        else:
            speak("You have no notes yet.")
    else:
        speak("You have no notes yet.")

def main():
    wishMe()
    while True:
        speak("Listening for command. Say 'exit' to stop.")
        query = takeCommand()
        if not query:
            continue

        if "exit" in query or "quit" in query:
            speak("Goodbye!")
            break

        if "wikipedia" in query or query.startswith("tell me about"):
            query = query.replace("wikipedia", "").replace("tell me about", "").strip()
            search_wikipedia(query)
            continue

        if "time" in query:
            strTime = datetime.datetime.now().strftime("%I:%M %p")
            speak(f"The time is {strTime}")
            continue

        if "open youtube" in query:
            open_website("youtube.com")
            continue
        if "open google" in query:
            open_website("google.com")
            continue

        if "write a note" in query:
            speak("What should I write?")
            note_text = takeCommand()
            if note_text:
                write_note(note_text)
            continue

        if "read notes" in query:
            read_notes()
            continue

        if "how are you" in query:
            speak("I am an AI, always ready to help you.")
            continue

        if "who are you" in query:
            speak("I am your voice assistant created in Python.")
            continue

        if query.startswith("search for"):
            search_terms = query.replace("search for", "").strip()
            speak(f"Searching the web for {search_terms}")
            webbrowser.open(f"https://www.google.com/search?q={search_terms.replace(' ', '+')}")
            continue

        # Fallback
        speak("I didn't understand that. I will search the web.")
        webbrowser.open(f"https://www.google.com/search?q={query.replace(' ', '+')}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        speak("Shutting down. Goodbye!")